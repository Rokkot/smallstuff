//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceTest.CommClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandData", Namespace="http://schemas.datacontract.org/2004/07/CommunicationLayer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WCFServiceTest.CommClient.StatusInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WCFServiceTest.CommClient.StatusInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    public partial class CommandData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CommandIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] CommandParamsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CommandID {
            get {
                return this.CommandIDField;
            }
            set {
                if ((this.CommandIDField.Equals(value) != true)) {
                    this.CommandIDField = value;
                    this.RaisePropertyChanged("CommandID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] CommandParams {
            get {
                return this.CommandParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandParamsField, value) != true)) {
                    this.CommandParamsField = value;
                    this.RaisePropertyChanged("CommandParams");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusInfo", Namespace="http://schemas.datacontract.org/2004/07/CommunicationLayer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WCFServiceTest.CommClient.CommandData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WCFServiceTest.CommClient.StatusInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    public partial class StatusInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object InfoDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InfoIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InfoData {
            get {
                return this.InfoDataField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoDataField, value) != true)) {
                    this.InfoDataField = value;
                    this.RaisePropertyChanged("InfoData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoDescription {
            get {
                return this.InfoDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoDescriptionField, value) != true)) {
                    this.InfoDescriptionField = value;
                    this.RaisePropertyChanged("InfoDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InfoID {
            get {
                return this.InfoIDField;
            }
            set {
                if ((this.InfoIDField.Equals(value) != true)) {
                    this.InfoIDField = value;
                    this.RaisePropertyChanged("InfoID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommClient.ICommunicationService", CallbackContract=typeof(WCFServiceTest.CommClient.ICommunicationServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/ExecuteCommand", ReplyAction="http://tempuri.org/ICommunicationService/ExecuteCommandResponse")]
        bool ExecuteCommand(WCFServiceTest.CommClient.CommandData _data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/ExecuteCommand", ReplyAction="http://tempuri.org/ICommunicationService/ExecuteCommandResponse")]
        System.Threading.Tasks.Task<bool> ExecuteCommandAsync(WCFServiceTest.CommClient.CommandData _data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/GetStatusInfo", ReplyAction="http://tempuri.org/ICommunicationService/GetStatusInfoResponse")]
        WCFServiceTest.CommClient.StatusInfo[] GetStatusInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/GetStatusInfo", ReplyAction="http://tempuri.org/ICommunicationService/GetStatusInfoResponse")]
        System.Threading.Tasks.Task<WCFServiceTest.CommClient.StatusInfo[]> GetStatusInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/SubscribeForEvernts", ReplyAction="http://tempuri.org/ICommunicationService/SubscribeForEverntsResponse")]
        void SubscribeForEvernts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/SubscribeForEvernts", ReplyAction="http://tempuri.org/ICommunicationService/SubscribeForEverntsResponse")]
        System.Threading.Tasks.Task SubscribeForEverntsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/UnSubscribeFromEvernts", ReplyAction="http://tempuri.org/ICommunicationService/UnSubscribeFromEverntsResponse")]
        void UnSubscribeFromEvernts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/UnSubscribeFromEvernts", ReplyAction="http://tempuri.org/ICommunicationService/UnSubscribeFromEverntsResponse")]
        System.Threading.Tasks.Task UnSubscribeFromEverntsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/IsRunning", ReplyAction="http://tempuri.org/ICommunicationService/IsRunningResponse")]
        bool IsRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommunicationService/IsRunning", ReplyAction="http://tempuri.org/ICommunicationService/IsRunningResponse")]
        System.Threading.Tasks.Task<bool> IsRunningAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommunicationService/CustomEventRaised")]
        void CustomEventRaised(string newData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceChannel : WCFServiceTest.CommClient.ICommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationServiceClient : System.ServiceModel.DuplexClientBase<WCFServiceTest.CommClient.ICommunicationService>, WCFServiceTest.CommClient.ICommunicationService {
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool ExecuteCommand(WCFServiceTest.CommClient.CommandData _data) {
            return base.Channel.ExecuteCommand(_data);
        }
        
        public System.Threading.Tasks.Task<bool> ExecuteCommandAsync(WCFServiceTest.CommClient.CommandData _data) {
            return base.Channel.ExecuteCommandAsync(_data);
        }
        
        public WCFServiceTest.CommClient.StatusInfo[] GetStatusInfo() {
            return base.Channel.GetStatusInfo();
        }
        
        public System.Threading.Tasks.Task<WCFServiceTest.CommClient.StatusInfo[]> GetStatusInfoAsync() {
            return base.Channel.GetStatusInfoAsync();
        }
        
        public void SubscribeForEvernts() {
            base.Channel.SubscribeForEvernts();
        }
        
        public System.Threading.Tasks.Task SubscribeForEverntsAsync() {
            return base.Channel.SubscribeForEverntsAsync();
        }
        
        public void UnSubscribeFromEvernts() {
            base.Channel.UnSubscribeFromEvernts();
        }
        
        public System.Threading.Tasks.Task UnSubscribeFromEverntsAsync() {
            return base.Channel.UnSubscribeFromEverntsAsync();
        }
        
        public bool IsRunning() {
            return base.Channel.IsRunning();
        }
        
        public System.Threading.Tasks.Task<bool> IsRunningAsync() {
            return base.Channel.IsRunningAsync();
        }
    }
}
